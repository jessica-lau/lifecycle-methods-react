{"ast":null,"code":"import _classCallCheck from \"/home/docker/lifecycle-methods/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/docker/lifecycle-methods/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/docker/lifecycle-methods/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/docker/lifecycle-methods/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/docker/lifecycle-methods/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/docker/lifecycle-methods/src/App.js\";\nimport React, { Component } from \"react\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      message: \"\"\n    };\n\n    _this.updateMessage = function (event) {\n      return _this.setState({\n        message: event.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // TODO: read from local storage, and if we find a message there, log it to the console\n      var stateString = localStorage.getItem(\"stateString\");\n\n      if (stateString) {\n        var savedString = JSON.parse(stateString);\n        console.log(savedString);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // TODO: save the message from our component's state to the browser's local storage\n      var stateString = JSON.stringify(this.state.message);\n      localStorage.setItem(\"stateString\", stateString);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"main\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      }, \"Session Traveler\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message here...\",\n        value: this.state.message,\n        onChange: this.updateMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }\n      }, \"Type a message above, then refresh this page.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }\n      }, \"After refreshing this site, check your developer console to see the text that was saved to the browsers local storage each time you typed into the input, then read out from local storage after the page was refreshed.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }\n      }, \"Thanks to your browser's localStorage, you're message has traveled from one session of the web app to another!\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/docker/lifecycle-methods/src/App.js"],"names":["React","Component","App","state","message","updateMessage","event","setState","target","value","stateString","localStorage","getItem","savedString","JSON","parse","console","log","stringify","setItem"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,G;;;;;;;;;;;;;;;UACFC,K,GAAQ;AAAEC,MAAAA,OAAO,EAAE;AAAX,K;;UACRC,a,GAAgB,UAAAC,KAAK;AAAA,aAAI,MAAKC,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAEE,KAAK,CAACE,MAAN,CAAaC;AAAxB,OAAd,CAAJ;AAAA,K;;;;;;;wCACD;AAChB;AACA,UAAIC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAlB;;AAEA,UAAIF,WAAJ,EAAiB;AACb,YAAIG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAlB;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACH;AACJ;;;yCACoB;AACjB;AACA,UAAIH,WAAW,GAAGI,IAAI,CAACI,SAAL,CAAe,KAAKf,KAAL,CAAWC,OAA1B,CAAlB;AACAO,MAAAA,YAAY,CAACQ,OAAb,CAAqB,aAArB,EAAoCT,WAApC;AACH;;;6BACQ;AACL,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,WAAW,EAAC,wBAFhB;AAGI,QAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,OAHtB;AAII,QAAA,QAAQ,EAAE,KAAKC,aAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oOATJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0HAfJ,CADJ;AAsBH;;;;EAxCaJ,S;;AA2ClB,eAAeC,GAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n    state = { message: \"\" };\n    updateMessage = event => this.setState({ message: event.target.value });\n    componentDidMount() {\n        // TODO: read from local storage, and if we find a message there, log it to the console\n        var stateString = localStorage.getItem(\"stateString\");\n        \n        if (stateString) {\n            var savedString = JSON.parse(stateString);\n            console.log(savedString);\n        }\n    }\n    componentDidUpdate() {\n        // TODO: save the message from our component's state to the browser's local storage\n        var stateString = JSON.stringify(this.state.message);\n        localStorage.setItem(\"stateString\", stateString);\n    }\n    render() {\n        return (\n            <main>\n                <h2>Session Traveler</h2>\n                <input\n                    type=\"text\"\n                    placeholder=\"Type a message here...\"\n                    value={this.state.message}\n                    onChange={this.updateMessage}\n                />\n                <p>Type a message above, then refresh this page.</p>\n                <p>\n                    After refreshing this site, check your developer console to see the\n                    text that was saved to the browsers local storage each time you typed\n                    into the input, then read out from local storage after the page was\n                    refreshed.\n        </p>\n                <p>\n                    Thanks to your browser's localStorage, you're message has traveled\n                    from one session of the web app to another!\n        </p>\n            </main>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}